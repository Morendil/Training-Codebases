
A Tale of Two Codebases: Two Versions of 10 x 10 TicTacToe Game where First Player to 5-in-a-row Wins

What you'll need for this series of exercises:

-- Eclipse 3.2+

Detailed Instructions:

This Eclipse project consists of two different implementations of the same 10 x 10, first-to-5 TicTacToe game: an older, 
legacy version, and a newer, mostly-test-driven replacement. Below we ask you to compare and learn about the two games, and to make some specific changes to the newer one. 

First, make a copy of this ReadMe file and respond to questions below in-line. 

NOTE: You need not spend more than 2 hours on this entire exercise, though you can feel free to spend as much time at it as you like. It can be a fun codebase to play in. 

NOTE: It is perfectly alright for you to stop after you are done with Exercise One (A) and Exercise One (B).  Those two can easily consume two hours. IF YOU HAVE MORE TIME TO SPEND, 
then feel free to continue to Exercise Two, but YOU ARE NOT OBLIGATED to do so. :)

IMPORTANT: When you make changes to the code, please insert "//TODO" tag comments that label your changes with your name or 
initials and the date, to make it easy for us to find them without your assistance. We can then find your changes easily in the Eclipse "tasks" view; which saves us time. 

-----------

The older game version consists of a single large class in its own source folder and package: legacy/legacyGame.LegacyGame. 
The newer game version consists of the src/controller.gameplay.TicTacToeGame class, and several other classes 
(in various packages).

Right-click on the GameGUI applet in the package view.applet, to play the newer TicTacToeGame and get a feel for it. (You are X's, and the computer is O's.)
The LegacyGame has its own applet in the legacyCode package, and you can run and look at the code.

Look carefully at the LegacyGame class (in package legacy/legacyGame), and compare it to the new TicTacToeGame and its various classes (in packages src/model.gamestate, 
src/model.patterns, and src/model.patternsearching). After comparing the old game and the new, write down some of the DESIGN DIFFERENCES between them. 

DESIGN DIFFERENCES:


 -- Can you tell any differences in overall game play strategy between the two games?
      - the Legacy game tries different strategies and as soon as it finds a decent position it uses it.
        It uses the number of moves made so far to help make that decision
      - the new game applies different strategies with each strategy offering the best "move" (position + score) for that strategy.
        Then the move with the best score considering all strategies is selected (including some funky tie-breaking for moves with the same score).
        The number of moves so far is not involved with the next move decision (it is only used to detect a draw)

 -- Can you mostly tell what is going on in the new game?
       - yes, after a little digging!
       - overall design pattern is MVC and a Strategy pattern is used to allow different game strategies to be plugged in
          - TicTacToeGame is the controller and is passed a view and strategy
          - the GameUI is the view and instantiates the TicToeGame with an ExampleStrategy
          - the model is composed of game state, primarily the Board, and various Finders and Patterns to 
       - ExampleStrategy.makeMove() assembles potential Moves into a MoveGroup pand selects the Move with the highest score in the group
          - a PatternFinder is used to assemble potential moves
             - it exposes methods that each apply a strategy for suggesting a single Move
             - each strategy method delegates to a specific Finder
          - a Finder uses a single strategy to calculate moves and may provide multiple strategy methods
             - e.g. findRandomEmptyPosition(), findRandomEmptyMidBoardPosition())
          - moves are assigned different scores; e.g. a move that blocks a sequence of 5 is assigned a score of 10, while one that blocks 3 only gets 3
          - potential moves are tried against all Series
          - Series are contiguous (except for GapSeries) of populated positions with a particular player mark
          - Series are assembled by SeriesFinder classes
             - Series are built up from all possible DirectionalBoardLists
             - SeriesFinders also find "blocking" positions in Series
          - a DirectionalBoardList contains a "line" sequence of board positions that would consitute a win if 5 adjacent positions were marked with the same mark

 -- Can you mostly tell what is going on in the old game?
      - sort of (with considerable effort); I can tell the LegacyGame.makeComputerMove() calls different methods to calculate next computer move
      - I did not bother trying to deduce the algorithm behind each strategy method

 -- What do you like most and least about the old game design?
      MOST:
        - the only really positive thing I can say is that it appears to work
        - not much, complete crap
      LEAST:
        - no tests
        - much duplication (esp. "if (position != NONE) { if (reporting) System.out.println(...);	return position);"
        - difficult to extract conceptual design from code
           - very difficult to deduce algorithm for each method used to get a potential move
           - some algorithic methods work on gameBoard[0] and others take an argument allowing called to select board
        - LegacyGame is simply old school functional code in OO wrapper
           - extreme violation of SRP
              - main violation is responsibility for game state is hopelessly intertwined with game strategy logic
           - most methods are public violoating encapsulation
           - the use of 3 copies of 10x10 board in gameBoard is needlessly exposed
           - decision as to move to make is in methods like closeGapInSeries() but later qualified by conditional logic in makeComputerMove() - split method responsibility
         - Lots of hard-coded values
           - e.g. gameState = 0 <= what does that mean?
           - size of game board is intrinsically tied into algorithms
        - LegacyGame state is completely exposed!
           - gameBoard, gameState, moveNumber and lastMove should be private
           - fact that game grid is managed as a single dimensional array is exposed
        - LegacyGameUI and LegacyGame are overly coupled
           - logic to check occupied square is in LegacyGameUI and should be in LegacyGame
           - LegacyGameUI should only need to call game.makeMove(x,y)
           - LegacyGame assumes a mouse in method name respondToMouseUp(): should simply be makeMove()
        - LegacyGameUI is one huge image!
           - should have at least seperate button for new game
           - would be much simpler a button for each game cell  

 -- What do you like most and least about the new game design?
      MOST
        - introduction of a TicTacToe DSL by suitably named classes and methods greatly helped in figuring out the code
        - use of MVC pattern
        - use of strategy pattern to allow different strategies
          - Finder classes are open, a la OCP, to important game aspects such as board size and number of marks needs for a win
        - use of interfaces allows test doubles to be used
        - use of DirectionalBoardPositions and Series made it easy to understand the algorithms being used
        - by and large this was coded like I would code it (although I learnt some things looking at this code)
           - classes are small and generally meet SRP
           - small methods with single level of absraction; use of Composed Method pattern is used where applicable to break up large methods
           - method and constructors have few arguments
           - use of enums for things like MoveScore; made the code easy to read (could tell what parameter context)
        
      LEAST
        - DirectionalBoardPositionsListFactory is hard-coded for 5 in a row diagonals: OCP violation on an important aspect of the game
        - Series throws an exception in getGap(); should have a GapSeries abstraction or something similar
        - IStrategy includes a method to return a new instance; a strategy factory would be better for this
        - some further encapsulation; some examples:
           - TicTacToe.wonTheGame() could be private
           - MoveGroup.getAllMovesWithSameScoreAsHighestScoringMove() could be private
        - several examples of methods returning value unnecessarily which is confusing when method not designed for fluent use
           - e.g. DirectionalBoardPositionsListFactory.getIndexHorizontalRows() returns same value as first arg
        - some "get" method also affect class state
           - in some cases it would be better to have "get" methods without side effects
        - some refactoring has left unnecessary code remnants
           - in some cases parameters that are passed that are already available as field members
        - some parts of the algorithm would be more easily expressed in row, column coordinates and then converted to 1D
           - e.g. FIRST_SQUARE_OF_FIRST_LOWER_BOARD_DIAG_UP_WITH_PENTE_ROOM = (Board.MAX_COLUMNS * (Board.MAX_COLUMNS - 1)) + 1 could be something like
                  FIRST_SQUARE_OF_FIRST_LOWER_BOARD_DIAG_UP_WITH_PENTE_ROOM = Board.get1DIndex(MAX_ROW_INDEX, MAX_COLUMN_INDEX-5) 
 
You can learn more about the new game by looking at and running the unit tests in the test source folder. 
 -- What do the unit tests tell you about the new game?
      - classes are highly decoupled because setup methods are simple and tests run fast; suggests good application of SRP
      - game design and code is robust
      - would be easy to maintain this code using these tests as a safety net
 -- What do you like and not like about any of these TestCases and test methods?
      LIKES
        - this test code is very much like I would write it so it was easy for me to grok what was going on
        - test methods are short and test primarily one simple condition
        - almost no conditional logic in tests
        - tests ran like string 90 in 0.134 seconds!
        - really like RandomMoveTests which provides pragmatic approach to test a non-deterministic algorithm
      DISLIKES 
        - some classes do not have unit tests (e.g. ExampleStrategy)
        - some house cleaning would be nice
           - should remove "throws Exception" from each test method declaration
           - should use junit4 @Test annotations
           - should use junit4 @Test(expected=...) annotation which will simplify tests that validate thrown exceptions
           - stylistically I prefer Dan North test naming style e.g. testKnowsIfItIsEmpty() => Should_know_when_empty()
       - GameStateTests could use some refactoring:
          - it uses an ExampleStrategy which makes test dependent on that strategy and game state does not depend on strategy
              - should provide a FakeStrategy instead
          - this test is also testing that the TicTacToeGame class correctly sets state
              - should split into TicTacToeGameTests and GameStateTests

 You can run the old game against the new game using the single test method in the OldGameAgainstNewGameTests TestCase in manualTests.manualTests. This test method is currently 
 set to play the two games against each other 200 times. 
  -- What does running this TestCase tell you about the old and new games? 
       - clearly the new game is superior; it wins about 4x times over old gamer
  
Exercise One (A):  SPEND NO MORE THAN 20 MINUTES ON THIS PART :)
  -- In the old legacyGame TicTacToeGame, what would it take to enable the human player to continue to win if they get 5 in a row, while the computer must now get 6 in a row to win?   
  -- Spend no more than about 20 minutes trying to hack this into place, with or without test-driving or unit tests, verifying manually with the applet. 

Exercise One (B):
  -- In the new TicTacToeGame, what would it take to enable the human player to win if they get 5 in a row, while the computer must get 6 in a row?   
  -- Spend no more than about 45 minutes trying to test-drive this change, and then verify it manually by running the applet. 
  
  Write a few notes about what you've learned about the differences between the two games by writing just this much code, and doing this much analysis and comparison. 
  - Actually the original game I got the win logic working but spent longer than 20 minutes; 35 minutes (it was just bugging me!)
  - With the legacy game I really just deduced how incrementing logic and loop variables were working
     - so I was able to hack a solution to win detection but this changed win criteria did not affect game play
  - The logic changes in the legacy only affected the game win detection; no alogorithms were improved
  - Some improvments in game play were automatically picked up because of the way the patterns and finders were designed
      - new game now beats old game 33x rather than 4x as a result of these changes
  - Felt more confident with new game because of unit tests
  - I could move more incrementally through update 

*****   IF YOU HAVE USED UP TWO HOURS BY THIS POINT, feel free to stop here. If you have more time and are learning or having fun, feel free to continue. Think of it as extra credit.
 
Exercise Two:
This game is a just a TicTacToe game. In the related game called Pente, a pair of contiguous "stones" (marks) are removed if 
they are blocked on each end by opposing player's stones (marks). (You can read more about Pente here:   http://en.wikipedia.org/wiki/Pente )
 
 In this next exercise, actually test-drive the change in the test-driven codebase:
  -- Test-drive the ability to "happen upon" an 'XOO-, where "-" is an empty spot' pattern, where you are X's and the other player is O's. 
  -- Test-drive the ability to opportunistically create a 'XOOX' pattern, and then remove the two opposing player's 'OO's? 
  -- Finally, verify the new behavior manually with the applet. 
  
Exercise Three:
What glaring or subtle opportunities for refactoring can you find in the new game?  Do you have the test coverage you need to make them?
  -- Are all of the unit tests well factored? 
  -- Are all of the pattern finding classes compliant with the so-called "Single Responsibility Principle" (SRP)? 
  -- If you can find a good refactoring opportunity in the new game, make the change in as test-protected a way as you can. 
  
Exercise Four: 
  -- How would you evolve the TicTacToeGame strategy so that it pro-actively looks for opportunities to trap pairs of opposing player marks? 
  -- Test-drive this change, and verify it manually with the applet GUI. 
  
Exercise Five:
  OK, so this one takes many hours to complete. It's completely optional. If you don't have a job, or a life, and you are addicted 
  to interesting code problems, feel free to try this one. The idea here is to test-drive a self-educating meta-TicTacToe game that learns how to combine moves most successfully to evolve 
  an optimal strategy.  You may want to start with a fresh copy of the codebase, without the Pente behavior, as a starting point. (You can save a zip of what you ahve done so far, then just revert to the google code repository head again.)
  
   -- The current ExampleStrategy class uses a particular "hard-coded" strategy to gather up potential moves for any game state, weight those potential moves, and then choose a particular move to make. 
   -- Test-drive a StrategyEvolver class that uses the same Domain Specific Language (DSL) of move pattern types, but tries different combinations of those move patterns, in different orders, 
      assigning different weights to them. (Feel free to add any of your own interesting new pattern types, but test-drive them.)
   -- Use a version of the manualTests test method to run each of your different combinations/weight assignments for different moves at least 200 times against the old game. 
   -- Store the average wins, losses, and draws for each such combination, when your game goes first. 
   -- Find the best overall strategy (move pattern and weight combination), and then find a way to encode that statically in a new OptimalStrategy class. 
   
   
REFERENCES: 

  To learn why this exercise is important, and the principles, patterns, and practices behind the differences between the legacy version and new 
  version of the TicTacToeGame, consider the following books:
  
  Clean Code,  							by Robert C Martin
  Test-Driven Development: By Example, 	by Kent Beck
  Refactoring, 							by Martin Fowler
  Working Effectively with Legacy Code, by Michael Feathers
  xUnit Test Patterns, 					by Gerard Meszaros
  Test Driven, 							by Lasse Koskela
  
 
 At the time of this writing, this set of books describes much of the knowledge that any "agile" Java developer should be familiar with. 
  
  
  
     

  
